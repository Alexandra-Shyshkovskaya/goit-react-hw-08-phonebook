{"version":3,"sources":["views/ContactsView/ContactsView.module.css","Components/ContactsForm/ContactsForm.module.css","Components/SearchFilter/Filter.module.css","Components/ContactsList/ContactsList.module.css","Components/ContactsForm/ContactsForm.js","redux/contact/contact-selectors.js","Components/SearchFilter/Filter.js","Components/ContactsList/ContactsList.js","views/ContactsView/ContactsView.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","reset","handleSubmit","preventDefault","props","addContacts","this","className","style","onSubmit","label","input","onChange","type","pattern","title","required","placeholder","labelNumber","button","Component","connect","dispatch","contactForm","contactOperations","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","allContacts","normalizedFilter","toLowerCase","includes","onHandleChange","changeFilter","deleteContacts","id","list","map","item","textName","textNumber","onClick","ContactsView","fetchContacts","caption","isLoadingContacts","fetchContact"],"mappings":"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","file":"static/js/3.72814fb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactsView_title__zBwOW\",\"caption\":\"ContactsView_caption__dY3Wz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactsForm_ContactForm__2FSEU\",\"label\":\"ContactsForm_label__17ZBM\",\"input\":\"ContactsForm_input__28xkd\",\"button\":\"ContactsForm_button__2XljB\",\"labelNumber\":\"ContactsForm_labelNumber__1ROgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__3uSJn\",\"input\":\"Filter_input__1YLdO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__CJiTZ\",\"item\":\"ContactsList_item__3sEFV\",\"textName\":\"ContactsList_textName__Z3vQp\",\"textNumber\":\"ContactsList_textNumber__3e2AO\",\"button\":\"ContactsList_button__2Yp3i\"};","import React, { Component } from 'react';\nimport style from \"./ContactsForm.module.css\";\nimport { connect } from 'react-redux';\nimport { contactOperations } from '../../redux/contact';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\nhandleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n  \n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n  \n    this.props.addContacts(this.state);\n    this.reset();\n  };\n  \n  render() {\n    const { name, number } = this.state;\n  \n    return (\n      <form className={style.ContactForm} onSubmit={this.handleSubmit}>\n        <label className={style.label}>Name</label>\n        <input\n          className={style.input}\n          value={name}\n          onChange={this.handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          placeholder=\"Введите имя\"\n        />\n        <label className={style.labelNumber}>Number</label>\n        <input\n          className={style.input}\n          value={number}\n          onChange={this.handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          placeholder=\"Введите номер телефона\"\n        />\n        <button type=\"submit\" className={style.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addContacts: contactForm =>\n    dispatch(contactOperations.addContacts(contactForm)),\n});\nexport default connect(null, mapDispatchToProps)(ContactForm);","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\nexport const getAllContacts = state => state.contacts.items;\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return allContacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contact/contact-action';\nimport style from './Filter.module.css';\nimport PropTypes from \"prop-types\";\nimport { getFilter } from '../../redux/contact/contact-selectors';\n\nconst Filter = ({ filter, onHandleChange }) => {\n  return (\n    <div>\n      <h3 className={style.title}>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onHandleChange}\n        className={style.input}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onHandleChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: getFilter(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onHandleChange: event => dispatch(changeFilter(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { contactOperations } from '../../redux/contact';\nimport style from \"./ContactsList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { getVisibleContacts } from '../../redux/contact/contact-selectors';\n\nconst ContactsList = ({ contacts, deleteContacts }) => {\n  return (\n    <ul className={style.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={style.item}>\n          <p className={style.textName}>{name}</p>\n          <p className={style.textNumber}>{number}</p>\n          <button type=\"button\" className={style.button} onClick={() => deleteContacts(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  deleteContacts: PropTypes.func,\n};\n\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContacts: id => dispatch(contactOperations.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport style from './ContactsView.module.css';\nimport ContactForm from '../../Components/ContactsForm';\nimport Filter from '../../Components/SearchFilter';\nimport ContactList from '../../Components/ContactsList';\nimport contactOperations from '../../redux/contact/contact-operations';\nimport { getLoading } from '../../redux/contact/contact-selectors';\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <h1 className={style.title}>Phonebook</h1>\n        <ContactForm />\n        <h2 className={style.caption}>Contacts</h2>\n        <Filter />\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: getLoading(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactOperations.fetchContact()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}