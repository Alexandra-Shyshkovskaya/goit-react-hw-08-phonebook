{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\nconst initialUserState = {\n  name: null,\n  email: null\n};\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, {\n    payload\n  }) => payload.user,\n  [authActions.loginSuccess]: (_, {\n    payload\n  }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, {\n    payload\n  }) => payload\n});\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, {\n    payload\n  }) => payload.token,\n  [authActions.loginSuccess]: (_, {\n    payload\n  }) => payload.token,\n  [authActions.logoutSuccess]: () => null\n});\n\nconst setError = (_, {\n  payload\n}) => payload;\n\nconst error = createReducer(null, {\n  [authActions.registerError]: setError,\n  [authActions.loginError]: setError,\n  [authActions.logoutError]: setError,\n  [authActions.getCurrentUserError]: setError\n});\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false\n});\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error\n});","map":{"version":3,"sources":["/Users/janakozachka/Documents/GitHub/goit-react-hw-08-phonebook/src/redux/auth/auth-reducer.js"],"names":["combineReducers","createReducer","authActions","initialUserState","name","email","user","registerSuccess","_","payload","loginSuccess","logoutSuccess","getCurrentUserSuccess","token","setError","error","registerError","loginError","logoutError","getCurrentUserError","isAuthenticated"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAAzB;AAEA,MAAMC,IAAI,GAAGL,aAAa,CAACE,gBAAD,EAAmB;AAC3C,GAACD,WAAW,CAACK,eAAb,GAA+B,CAACC,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACH,IADhB;AAE3C,GAACJ,WAAW,CAACQ,YAAb,GAA4B,CAACF,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACH,IAFb;AAG3C,GAACJ,WAAW,CAACS,aAAb,GAA6B,MAAMR,gBAHQ;AAI3C,GAACD,WAAW,CAACU,qBAAb,GAAqC,CAACJ,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA;AAJd,CAAnB,CAA1B;AAOA,MAAMI,KAAK,GAAGZ,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,WAAW,CAACK,eAAb,GAA+B,CAACC,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACI,KAD3B;AAEhC,GAACX,WAAW,CAACQ,YAAb,GAA4B,CAACF,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoBA,OAAO,CAACI,KAFxB;AAGhC,GAACX,WAAW,CAACS,aAAb,GAA6B,MAAM;AAHH,CAAP,CAA3B;;AAMA,MAAMG,QAAQ,GAAG,CAACN,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoBA,OAArC;;AAEA,MAAMM,KAAK,GAAGd,aAAa,CAAC,IAAD,EAAO;AAChC,GAACC,WAAW,CAACc,aAAb,GAA6BF,QADG;AAEhC,GAACZ,WAAW,CAACe,UAAb,GAA0BH,QAFM;AAGhC,GAACZ,WAAW,CAACgB,WAAb,GAA2BJ,QAHK;AAIhC,GAACZ,WAAW,CAACiB,mBAAb,GAAmCL;AAJH,CAAP,CAA3B;AAOA,MAAMM,eAAe,GAAGnB,aAAa,CAAC,KAAD,EAAQ;AAC3C,GAACC,WAAW,CAACK,eAAb,GAA+B,MAAM,IADM;AAE3C,GAACL,WAAW,CAACQ,YAAb,GAA4B,MAAM,IAFS;AAG3C,GAACR,WAAW,CAACU,qBAAb,GAAqC,MAAM,IAHA;AAK3C,GAACV,WAAW,CAACc,aAAb,GAA6B,MAAM,KALQ;AAM3C,GAACd,WAAW,CAACe,UAAb,GAA0B,MAAM,KANW;AAO3C,GAACf,WAAW,CAACiB,mBAAb,GAAmC,MAAM,KAPE;AAS3C,GAACjB,WAAW,CAACS,aAAb,GAA6B,MAAM;AATQ,CAAR,CAArC;AAYA,eAAeX,eAAe,CAAC;AAC7BM,EAAAA,IAD6B;AAE7Bc,EAAAA,eAF6B;AAG7BP,EAAAA,KAH6B;AAI7BE,EAAAA;AAJ6B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\nconst setError = (_, { payload }) => payload;\n\nconst error = createReducer(null, {\n  [authActions.registerError]: setError,\n  [authActions.loginError]: setError,\n  [authActions.logoutError]: setError,\n  [authActions.getCurrentUserError]: setError,\n});\n\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n\n  [authActions.logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error,\n});"]},"metadata":{},"sourceType":"module"}