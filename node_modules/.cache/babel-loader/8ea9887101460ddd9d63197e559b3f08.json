{"ast":null,"code":"import axios from 'axios';\nimport authActions from './auth-actions';\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  }\n\n};\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post('/users/signup', credentials);\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post('/users/login', credentials);\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: {\n      token: persistedToken\n    }\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n}; // eslint-disable-next-line \n\n\nexport default {\n  register,\n  logIn,\n  logOut,\n  getCurrentUser\n};","map":{"version":3,"sources":["/Users/janakozachka/Documents/GitHub/goit-react-hw-08-phonebook/src/redux/auth/auth-operations.js"],"names":["axios","authActions","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","dispatch","registerRequest","response","post","data","registerSuccess","error","registerError","message","logIn","loginRequest","loginSuccess","loginError","logOut","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","auth","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post('/users/signup', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post('/users/login', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n// eslint-disable-next-line \nexport default { register, logIn, logOut, getCurrentUser };"]},"metadata":{},"sourceType":"module"}